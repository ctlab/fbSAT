--controller model
MODULE CONTROL(REQ,c1Home, c1End, c2Home, c2End, vcHome, vcEnd, pp1, pp2, pp3)
VAR
	_state : {GoDown, Wait, Piece1, Piece2, Piece3, Vacuum_On, GoUp, VacuumOff, Retract};
	CNF : boolean;
	c1Extend : boolean;
	c1Retract : boolean;
	c2Extend : boolean;
	c2Retract : boolean;
	vcExtend : boolean;
	vacuum_on : boolean;
	vacuum_off : boolean;
	vs : boolean;
	vac : boolean;

ASSIGN
	init(_state) := Wait;

--variable part of controller starts here--

next(_state) := case
	_state = GoUp & REQ & vcHome & c1Home & c2Home : Wait;
	_state = Retract & REQ & vac & c1Home & c2Home : GoDown;
	_state = Wait & REQ & pp1 & vcHome : Piece1;
	_state = Wait & REQ & ! pp1 & pp2 & vcHome : Piece2;
	_state = Wait & REQ & ! pp1 & ! pp2 & pp3 & vcHome : Piece3;
	_state = Piece1 & REQ & c1End : GoDown;
	_state = Piece2 & REQ & c2End : GoDown;
	_state = Piece3 & REQ & c1End & c2End : GoDown;
	_state = GoDown & REQ & vcEnd & ! ( c1Home & c2Home ) : Vacuum_On;
	_state = Vacuum_On & REQ & vac : GoUp;
	_state = VacuumOff & REQ & ! vac : GoUp;
	_state = GoDown & REQ & vcEnd & c1Home & c2Home : VacuumOff;
	_state = GoUp & REQ & vcHome & ( ! c1Home | ! c2Home ) : Retract;
TRUE : _state;
esac;
 
next(CNF) := case
	_state = GoUp & REQ & next(_state) = Wait & vcHome & c1Home & c2Home: TRUE;
	_state = Retract & REQ & next(_state) = GoDown & vac & c1Home & c2Home: TRUE;
	_state = Wait & REQ & next(_state) = Piece1 & pp1 & vcHome: TRUE;
	_state = Wait & REQ & next(_state) = Piece2 & ! pp1 & pp2 & vcHome: TRUE;
	_state = Wait & REQ & next(_state) = Piece3 & ! pp1 & ! pp2 & pp3 & vcHome: TRUE;
	_state = Piece1 & REQ & next(_state) = GoDown & c1End: TRUE;
	_state = Piece2 & REQ & next(_state) = GoDown & c2End: TRUE;
	_state = Piece3 & REQ & next(_state) = GoDown & c1End & c2End: TRUE;
	_state = GoDown & REQ & next(_state) = Vacuum_On & vcEnd & ! ( c1Home & c2Home ): TRUE;
	_state = Vacuum_On & REQ & next(_state) = GoUp & vac: TRUE;
	_state = VacuumOff & REQ & next(_state) = GoUp & ! vac: TRUE;
	_state = GoDown & REQ & next(_state) = VacuumOff & vcEnd & c1Home & c2Home: TRUE;
	_state = GoUp & REQ & next(_state) = Retract & vcHome & ( ! c1Home | ! c2Home ): TRUE;
TRUE : FALSE;
esac;
 
init(c1Extend) := FALSE;

next(c1Extend) := case
	FALSE | next(_state) = Piece1 | next(_state) = Piece3  : TRUE;
 	FALSE | next(_state) = Retract | next(_state) = Wait  : FALSE;
 	TRUE :c1Extend;
esac;
 
init(c1Retract) := FALSE;

next(c1Retract) := case
	FALSE | next(_state) = Retract  : TRUE;
 	FALSE | next(_state) = Wait  : FALSE;
 	TRUE :c1Retract;
esac;
 
init(c2Extend) := FALSE;

next(c2Extend) := case
	FALSE | next(_state) = Piece2 | next(_state) = Piece3  : TRUE;
 	FALSE | next(_state) = Retract | next(_state) = Wait  : FALSE;
 	TRUE :c2Extend;
esac;
 
init(c2Retract) := FALSE;

next(c2Retract) := case
	FALSE | next(_state) = Retract  : TRUE;
 	FALSE | next(_state) = Wait  : FALSE;
 	TRUE :c2Retract;
esac;
 
init(vcExtend) := FALSE;

next(vcExtend) := case
	FALSE | next(_state) = GoDown  : TRUE;
 	FALSE | next(_state) = GoUp | next(_state) = Wait  : FALSE;
 	TRUE :vcExtend;
esac;
 
init(vacuum_on) := FALSE;

next(vacuum_on) := case
	FALSE | next(_state) = Vacuum_On  : TRUE;
 	FALSE | next(_state) = VacuumOff | next(_state) = Wait  : FALSE;
 	TRUE :vacuum_on;
esac;
 
init(vacuum_off) := FALSE;

next(vacuum_off) := case
	FALSE | next(_state) = VacuumOff  : TRUE;
 	FALSE | next(_state) = Vacuum_On | next(_state) = Wait  : FALSE;
 	TRUE :vacuum_off;
esac;
 

--variable part of controller ends here--

init(vs) := FALSE;
next(vs) := case
	next(CNF) & next(vacuum_on) : TRUE;
	next(CNF) & next(vacuum_off) : FALSE;
	next(CNF) & !next(vacuum_on) : FALSE;
	TRUE : vs;
esac;

init(vac) := FALSE;
next(vac) := case
	next(vp1) | next(vp2) | next(vp3) : TRUE;
	!next(vs) : FALSE;
	TRUE : vac;
esac;

DEFINE
    vp1 := c1End & c2Home & vcEnd & vs & pp1;
    vp2 := c1Home & c2End & vcEnd & vs & pp2;
    vp3 := c1End & c2End & vcEnd & vs & pp3;


--Plant model
MODULE PLANT(CNF, c1Extend, c1Retract, c2Extend, c2Retract, vcExtend, vacuum_on, vacuum_off)
VAR
    c1Home : boolean;
    c1End : boolean;
    c2Home : boolean;
    c2End : boolean;
    vcHome : boolean;
    vcEnd : boolean;
    st1 : { st1_1, st1_2, st1_3, st1_4, st1_5, st1_6};
    st2 : { st2_1, st2_2, st2_3, st2_4, st2_5, st2_6};
    st3 : { st3_1, st3_2, st3_3, st3_4, st3_5, st3_6};
ASSIGN

init(st1) := st1_1;
next(st1) := case
    st1 = st1_1 & next(CNF & c1Extend) : st1_2;
    st1 = st1_2 & next(CNF & c1Retract) : st1_1;
    st1 = st1_2 & next(c1Extend) : st1_3;
    st1 = st1_3 & next(CNF & c1Retract) : st1_4;
    st1 = st1_4 & next(CNF & c1Extend) : st1_3;
    st1 = st1_4 & next(c1Retract) : st1_1;
    TRUE : st1;
esac;

c1Home := st1 = st1_1;
c1End := st1 = st1_3;

init(st2) := st2_1;
next(st2) := case
    st2 = st2_1 & next(CNF & c2Extend) : st2_2;
    st2 = st2_2 & next(CNF & c2Retract) : st2_1;
    st2 = st2_2 & next(c2Extend) : st2_3;
    st2 = st2_3 & next(CNF & c2Retract) : st2_4;
    st2 = st2_4 & next(CNF & c2Extend) : st2_3;
    st2 = st2_4 & next(c2Retract) : st2_1;
    TRUE : st2;
esac;

c2Home := st2 = st2_1;
c2End := st2 = st2_3;


init(st3) := st3_1;
next(st3) := case
    next(CNF & vcExtend) & st3 = st3_1 : st3_2;
    next(vcExtend) & st3 = st3_2 : st3_5;
    next(vcExtend) & st3 = st3_5 : st3_4;
    next(CNF & vcExtend) & st3 = st3_3 : st3_4;
    next(CNF & !vcExtend) & st3 = st3_2 : st3_1;
    next(!vcExtend) & st3 = st3_3 : st3_6;
    next(!vcExtend) & st3 = st3_6 : st3_1;
    next(CNF & !vcExtend) & st3 = st3_4 : st3_3;
    TRUE : st3;
esac;

vcHome := st3 = st3_1 | st3 = st3_2;
vcEnd := st3 = st3_3 | st3 = st3_4;



-- additional predicates, environment modeling
MODULE main()
VAR
    REQ : boolean;
    pp1 : boolean;
    pp2 : boolean;
    pp3 : boolean;
    vac : boolean;
    CNF : boolean;
    vs : boolean;
    p1 : boolean;
    p2 : boolean;
    p3 : boolean;
    lifted : boolean;

    C : CONTROL(REQ, P.c1Home, P.c1End, P.c2Home, P.c2End, P.vcHome, P.vcEnd, pp1, pp2, pp3);
    P : PLANT(C.CNF, C.c1Extend, C.c1Retract, C.c2Extend, C.c2Retract, C.vcExtend, C.vacuum_on, C.vacuum_off);

ASSIGN

REQ := TRUE;
p2 := FALSE;
p3 := FALSE;


init(pp1) := FALSE;
next(pp1) := case
    C.vp1 : FALSE;
    pp1 : TRUE;
    TRUE : p1;
esac;

init(pp2) := FALSE;
next(pp2) := case
    C.vp2 : FALSE;
    pp2 : TRUE;
    TRUE : p2;
esac;

init(pp3) := FALSE;
next(pp3) := case
    C.vp3 : FALSE;
    pp3 : TRUE;
    TRUE : p3;
esac;

init(lifted) := FALSE;
next(lifted) := case
    C.vp1 : TRUE;
    dropped : FALSE;
    TRUE : lifted;
esac;

DEFINE
    dropped := lifted & P.c1Home & P.c2Home & P.vcEnd & !C.vacuum_on & C.vacuum_off;



--specification
LTLSPEC G!(C.c1Extend & C.c1Retract)
LTLSPEC G!(C.c2Extend & C.c2Retract)
LTLSPEC G!(C.vacuum_on & C.vacuum_off)
LTLSPEC G (!P.vcHome & !P.vcEnd -> P.c1Home | P.c1End)
LTLSPEC G (!P.c1Home & !P.c1End -> P.vcHome | P.vcEnd)
LTLSPEC G (P.c1Home & P.c2Home & P.vcHome & !pp1 & !lifted -> X(!C.c1Extend & !C.c2Extend & !C.vcExtend))
LTLSPEC G (pp1 -> F(C.vp1))
LTLSPEC G!(!P.c1Home & !P.c1End & !P.vcHome & !P.vcEnd)
LTLSPEC G (lifted -> F(dropped))


